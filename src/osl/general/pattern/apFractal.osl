shader apFractal
[[
	string help = "Create a fractal from noise patterns.",
	int rfm_nodeid = 0x0013cb80,
	string rfm_classification = "rendernode/apettit/general/pattern"
]]
(
	string type = "uperlin"
	[[
		int connectable = 0,
		string label = "Noise Type",
		string help = "Select the noise type to use.",
		string widget = "mapper",
		string options = "Perlin:uperlin|Simplex:usimplex|Cell:cell"
	]],
	float frequency = 1.0
	[[
		string label = "Frequency",
		string help = "This varies the frequency of the nosie."
	]],
	float variation = 0.0
	[[
		string label = "Variation",
		string help = "This produces a different variant without changing any characteristics."
	]],
	float dimension = 1.0
	[[
		string label = "Dimension",
		string help = "(0.0 - 1.5) Scales the amplitude of each iteration."
	]],
	float lacunarity = 2.0
	[[
		string label = "Lacunarity",
		string help = "(1.0 - 5.0) Scales the frequency of each iteration."
	]],
	float erosion = 0.0
	[[
		string label = "Erosion",
		string help = "(-2.0 - 2.0) Negative values will smooth out low areas, "
					 "and positive values will smooth out high areas."
	]],
	int iterations = 5
	[[
		string label = "Iterations",
		string help = "Controls the number of times the base noise is combined with itself."
	]],

	output color resultRGB = color(0.0),
	output float resultF = 0.0
)
{
	point Q = P;
	getattribute("builtin", "Po", Q); 		// renderMan
	getattribute("primvar", "__Pref", Q);	// renderMan, unless manually installed
	Q = transform("common", "object", Q);

	Q /= frequency;

	// iteration variables
	float iterationFrequency = 1.0;
	color iterationValue = 1.0;
	color totalValue = 0.0;

	color pattern = color(0.0);

	for (int i = 0; i < iterations; i++)
	{
		point iterationQ = Q * iterationFrequency;
		pattern += noise(type, iterationQ, variation) * iterationValue;

		iterationFrequency *= lacunarity;
		totalValue += iterationValue;

		color erosion = mix(-erosion, erosion, pattern/totalValue);

		iterationValue = color(1.0) / pow(iterationFrequency, (3.0 - (2.0 * dimension)) + (2.0 * erosion));
	}

	pattern /= totalValue;

	resultRGB = pattern;
	resultF = resultRGB.r;
}